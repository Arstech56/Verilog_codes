
//Sequence detector design "1000" that detects the sequence and gives 1 at the output that indicates that the sequence has been detected 

module seq_detector_1000(
  input clk,
  input reset,
  input in,
  output wire out);
  
  //Passing the paramateres or States of the State Diagram
  
  localparam s0=3'b000,          //State S0
             s1=3'b001,          //State S1
             s2=3'b010,          //State S2
             s3=3'b011,          //State S3
             s4=3'b100;          //State S4
  
  // State Enumerations
  
  reg [2:0] current_state;    //Signals passing bits from one state to another
  reg [2:0] next_state;
  
  //State Memory Block
  always @(posedge clk)       //Procedural Assignment
    begin
      if (reset)
        current_state<=0;
      else begin
        current_state<=next_state;
      end
    end
  
  //Transitiion Block 
  
  always @(in, current_state)    //Procedural Assignment
    begin
      case(current_state)
        
        s0: begin              //Idle state
          if(in==0)
            next_state<=s0;
          else 
            next_state<=s1;
        end 
          
        s1: begin              //Proceeding to next
            if(in==0)
              next_state<=s2;
            else 
              next_state<=s1;
          end
        
           s2: begin          //Proceeding to next 
            if(in==0)
              next_state<=s3;
            else 
              next_state<=s1;
          end
        
           s3: begin          //Proceeding to next 
            if(in==0)
              next_state<=s4;
            else 
              next_state<=s1;
          end
        
           s4: begin          //Proceeding to next
            if(in==0)
              next_state<=s4;
            else 
              next_state<=s0;
          end
        
  default: next_state<=s0;   //Default state set to S0 in case of invalid entry
        
      endcase
    end
  
  //Output Logic
        assign out=(current_state==s4)? 1:0;
  
endmodule



       //Testbench
//TESTBENCH OF SEQUENCE DETECTOR 1000
module seq_detector_1000_tb();
  bit clk;
  reg reset, in;
  wire out;
  
  //Instantiation
  seq_detector_1000 dut(clk, reset, in, out);
  
  always #5 clk=~clk;                       //Generation of Clock
  
  initial
    begin
      reset=1;
      #10
      reset=0;
      
      for(int i=0;i<50;i++) begin @(posedge clk)
        in=$random;                         //Input signal's random selection
        reset=1;
        #10
        reset=0;
      end
      
    end
  
  //Dumping Waves
  
  initial
    begin
      $dumpfile("dump.vcd");
      $dumpvars();
      #300
      $finish;
    end
endmodule

